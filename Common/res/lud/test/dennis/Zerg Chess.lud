(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Zerg Chess" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (rectangle <Rows:num> 8)) 
        
        ("ChessPawn" "Pawn"
            (or 
                (if (and 
                        (= (who at:(from)) P1) 
                        (is In (from) (sites Start (piece (what at:(from)))))
                    )
                    ("DoubleStepForwardToEmpty" "SetEnPassantLocation")
                )
                "EnPassant"
            )
            (then ("ReplayInMovingOn" (sites Mover "Promotion")))
        )
        
        ("ChessRook" "Rook")
        ("ChessKing" "King")
        ("ChessBishop" "Bishop")
        ("ChessKnight" "Knight")
        ("ChessQueen" "Queen")
        
        (regions "Promotion" P1 (sites Top))
        (regions "GoalRegion" P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (expand (sites Top) steps:(- (- <Rows:num> 3) <EmptyRows:num>)))
            (place "Rook1" (sites Random (sites Bottom)))
            (place "King1" (sites Random (intersection (sites Bottom) (sites Empty))))
            (place "Rook1" (sites Random (intersection (sites Bottom) (sites Empty))))
            (place "Bishop1" (sites Random (intersection (sites Bottom) (sites Empty))))
            (place "Bishop1" (sites Random (intersection (sites Bottom) (sites Empty))))
            (place "Knight1" (sites Random (intersection (sites Bottom) (sites Empty)) num:2))
            (place "Queen1" (sites Random (intersection (sites Bottom) (sites Empty))))
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (forEach Piece)
            )
        )
        
        (end {
            (if (and 
                    (is Mover P1)
                    (no Pieces P2)
                ) 
                (result P1 Win)
            ) 
            (if (and {
                    (is Mover P2)
                    (is In (last To) (sites Mover))
                }) 
                (result P2 Win)
            ) 
            (if (no Moves Mover) (result Mover Draw)) 
        })
    )
)

(option "Rows" <Rows> args:{ <num> }
    {
    (item "8" <8> "The board has 8 rows.")*
    (item "9" <9> "The board has 9 rows.")
    (item "10" <10> "The board has 10 rows.")
    (item "11" <11> "The board has 11 rows.")
    (item "12" <12> "The board has 12 rows.")
    }
)

(option "Empty Rows" <EmptyRows> args:{ <num> }
    {
    (item "2" <2> "The board has 2 empty rows.")
    (item "3" <3> "The board has 3 rows.")*
    }
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Zerg Chess is a game.")
        (rules "The game has rules.")
        (credit "Dennis Soemers")
        }
    )
    
    (graphics {
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
    (ai 
        "Horde Chess_ai"
    )
    
)
